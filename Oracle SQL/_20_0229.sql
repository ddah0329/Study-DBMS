-- 외부조인 OUTER JOIN
CREATE TABLE TBL_GRADE(
	GRADE_NUMBER NUMBER CONSTRAINT PK_GRADE PRIMARY KEY,
	GRADE_NAME VARCHAR2(500)
);

CREATE TABLE TBL_USER( 
	USER_NUMBER NUMBER CONSTRAINT PK_USER PRIMARY KEY,
	USER_ID VARCHAR2(500),
	GRADE_NUMBER NUMBER,
	CONSTRAINT FK_GRADE FOREIGN KEY(GRADE_NUMBER) REFERENCES TBL_GRADE(GRADE_NUMBER)
);

INSERT INTO TBL_GRADE
VALUES(1, 'VVIP');

INSERT INTO TBL_GRADE
VALUES(4, 'LOW');

SELECT * FROM TBL_GRADE;

INSERT INTO TBL_USER 
VALUES(1, 'AAA', 1)

INSERT INTO TBL_USER 
VALUES(2, 'BBB', 2)

SELECT * FROM TBL_USER;


-- INNER JOIN : 정확하게 결과가 일치하는 행만 합쳐준다. 
SELECT * 
FROM TBL_USER U JOIN TBL_GRADE G
ON U.GRADE_NUMBER = G.GRADE_NUMBER;

-- OUTER JOIN : 테이블 하나를 일단 가져와 테이블을 합쳐준다.
 SELECT *
 FROM TBL_GRADE G LEFT OUTER JOIN TBL_USER U
 ON G.GRADE_NUMBER = U.GRADE_NUMBER;
 


-- 계정 권한 부여, 회수
GRANT UPDATE, DELETE, INSERT
ON EMPLOYEES -- 테이블
TO TEST; --계정명

-- 계정 권한  회수
REVOKE SELECT
ON EMPLOYEES
FROM TEST;



SELECT TO_CHAR(SYSDATE, 'YYYY-MM-DD')
FROM DUAL;

SELECT TO_CHAR(SYSDATE, 'YYYY"년 "MM"월 "DD"일"')
FROM DUAL;


-- PLAYER 테이블에서 키가 NULL인 선수들의 키를 170으로 변경하여
-- 포지션과 포지션별 평균 키 조회
SELECT POSITION, AVG(NVL(HEIGHT,170))
FROM PLAYER
GROUP BY POSITION;

-- PLAYER 테이블에서 팀 별 최대 몸무게 조회
SELECT * FROM PLAYER;

SELECT TEAM_ID, MAX(WEIGHT) 
FROM PLAYER
GROUP BY TEAM_ID
ORDER BY TEAM_ID;

SELECT MAX(WEIGHT) FROM PLAYER;


-- AVG함수를 사용하지 않고 PLAYER테이블의 모든 선수들의 평균 키 구하기
-- 총합 / 개수 == 평균
SELECT SUM(HEIGHT)/COUNT(HEIGHT) 평균
FROM PLAYER

SELECT AVG(HEIGHT) 평균
FROM PLAYER
